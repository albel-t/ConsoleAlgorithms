Цель работы. Освоить основы работы с классами в языке С++.
Задание:
Разработать класс для выбранной в ЛР2 предметной (проблемной) области.
Класс должен включать: ?4 строковых поля и ?3 числовых поля,
конструктор, деструктор, методы доступа к закрытым данным класса, ?3
методов работы с данными класса. Создать ?3 экземпляра класса.
Продемонстрировать работу всех методов.



Цель работы. Освоить основные алгоритмы сортировки данных линейной
структуры.
Задание.
1. Выбрать и реализовать на языке программирования C++ один алгоритм из
следующей группы алгоритмов сортировки: сортировка выбором, сортировка
обменом, сортировка вставками;
2. Выбрать и реализовать на языке программирования C++ один алгоритм из
следующей группы алгоритмов сортировки: сортировка Шелла, сортировка
слиянием, быстрая сортировка, пирамидальная сортировка;
3. Выбрать и реализовать на языке программирования C++ любой алгоритм
сортировки, не входящий в группы алгоритмов из предыдущих заданий;
4
*
. Измерить время работы алгоритмов на трех массивах: заполненном
случайными ключами (нормальный случай), уже отсортированном по
возрастанию (лучший случай) и отсортированном по убыванию (худший
случай).
Дополнительные условия:
1. Минимальный размер массива для тестирования алгоритмов в заданиях 1-3
– 30 элементов.
2. Минимальный размер массива для тестирования алгоритмов в задании 4* –
100000 элементов.





from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_UNDERLINE

import glob
import os

def addCode(name, paragraph):
    p = paragraph.add_run(name)
    p.font.name = 'Consolas'
    p.font.size = Pt(12)
    return p

def addTask(task, paragraph):
    p = paragraph.add_run(task)
    p.font.name = 'Times_New_Roman'
    p.font.size = Pt(14)
    return p

def addCodeTitle(code, paragraph):
    p = addTask(code, paragraph)
    p.font.bold = True
    return p

def addTaskTitle(text, paragraph):
    p = addTask(text, paragraph)
    p.font.bold = True
    return p


#visual studio
# path_to_project = input()
path_to_project = "C:/Users/Bill/source/repos/ConsoleAlgorithms"
path_to_template = "C:/Users/Bill/source/repos/ConsoleAlgorithms/ConsoleAlgorithms/algorithms_template.docx"
name_solution = "ConsoleAlgorithms"
name_laba = "laba_5"
# пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
doc = Document(path_to_template)


# пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
style = doc.styles['Normal']
style.font.name = 'Times_New_Roman'
style.font.size = Pt(14)
p = doc.add_paragraph(" ")

addTaskTitle("Цель работы:\n", p)
print("Purpose of the work:")
addTask(input() + "\n", p)

addTaskTitle("Заданиe:\n", p)
print("Exercise:")
addTask(input() + "\n", p)

laba_file = path_to_project + '/' + name_solution + '/' + name_solution + '.cpp'

file_text = open(laba_file, "r", encoding="utf8").read()

addTaskTitle("Решение:\n", p)
# print(file_text, file_text.find("/***") , file_text.find("***/"), file_text[file_text.find("/***") : file_text.find("***/")])
addTask(file_text[file_text.find("/****")+5 : file_text.find("****/")], p) #пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
print("main file: - ", laba_file)

addCodeTitle("Code: " + name_solution + '.cpp\n', p)
addCode(file_text[file_text.find("****/")+5 : ], p) #пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
print("write: ", name_solution + '.cpp')


laba_file = path_to_project + '/' + name_solution + '/' + name_laba
for filename in glob.glob(laba_file + ".*"):    #пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ ".../v[пїЅпїЅпїЅпїЅпїЅпїЅ].txt"
    addCodeTitle("\nCode: " + filename[filename.find(name_laba) : ] + '\n', p)
    addCode(open(filename, "r").read(), p) #пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
    print("write: ", filename)

laba_file = path_to_project + '/' + name_solution + '\\'

for filename in glob.glob(laba_file + "*.cpp"):
    print("filename:", filename)
    if (filename not in glob.glob(laba_file + "laba_*.cpp")) and (filename not in glob.glob(laba_file + "ConsoleAlgorithms.cpp")):
        addCodeTitle("\nCode: " + filename[filename.find('\\') : ] + '\n', p)
        addCode(open(filename, "r").read(), p)
        print("_write: ", filename)

for filename in glob.glob(laba_file + "*.h"):
    print("filename:", filename)
    if  filename not in glob.glob(laba_file + "laba_*.h"):
        addCodeTitle("\nCode: " + filename[filename.find('\\') : ] + '\n', p)
        addCode(open(filename, "r").read(), p)
        print("_write:", filename)


doc.save(path_to_project + '/отчет_'+name_laba+'.docx')